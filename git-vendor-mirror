#!/usr/bin/env python
#
#
# Copyright (c) 2016   Threatstack, Inc
#                      J. Paul Reed
#
# Licensed under the MIT license; see the LICENSE file for more information.
#
#
#
# TODO:
# Check python 2.7
# Validate SSL?
# cleanup tmpfiles
# helper functions for branch names
#

from datetime import datetime
import hashlib
from optparse import OptionParser
import os
import re
from socket import getfqdn
from subprocess import Popen, PIPE, STDOUT
import sys
from tempfile import gettempdir
from urllib2 import urlopen, URLError, HTTPError
from zipfile import ZipFile

GIT_BIN = os.getenv('GIT', 'git')

READ_CHUNK_SZ = 8192

def GetFileHash(filename, hashType='sha1'):
    if hashType not in hashlib.algorithms:
        raise ValueError("Invalid hash selected: %s" % (hashType))

    hashObj = hashlib.new(hashType)

    with open(filename, 'rb') as fileHandle:
        while True:
            chunk = fileHandle.read(READ_CHUNK_SZ)
            if chunk == '':
                break

            hashObj.update(chunk)

    return hashObj.hexdigest()

def UnzipFile(zipfile, dest, stripPath=0):
    print "Unzipping %s to %s with stripPath %s" % (zipfile, dest, stripPath)
    with ZipFile(zipfile, 'r') as zipfileHandle:
        # We do this manually instead of using extractall() because extract()
        # sanitizes absolute and '..'-containing paths in a reasonable way, so
        # we don't have to.
        if stripPath > 0:
            for member in zipfileHandle.infolist():
                pathParts = os.path.normpath(member.filename).split(os.sep)
                pathParts = pathParts[stripPath:]

                if len(pathParts) == 0:
                    continue

                memberDest = os.sep.join(pathParts)
                memberDestFullPath = os.path.join(dest, memberDest)

                #print "%s -> %s" % (member.filename, memberDestFullPath)
                if member.filename.endswith('/'):
                    os.makedirs(memberDestFullPath)
                else:
                    with open(memberDestFullPath, 'wb') as destFileHandle:
                        destFileHandle.write(zipfileHandle.read(member))
        else:
            for member in zipfileHandle.namelist():
                zipfileHandle.extract(member, dest)

KNOWN_ARCHIVE_FORMATS = {
    'zip': UnzipFile,
}

def ClearGitRepo(repo):
    repoNeedsCommit = False
    for entry in os.listdir(repo):
        if os.path.isdir(entry):
            # don't perform Git operations on the repo directory.
            if entry == '.git':
                continue

            gitCmd = [GIT_BIN, 'rm', '-r', entry]
        else:
            gitCmd = [GIT_BIN, 'rm', entry]

        gitRm = Popen(gitCmd, cwd=repo, stdout=PIPE, stderr=STDOUT,
         universal_newlines=True)
        out, err = gitRm.communicate()
        repoNeedsCommit = True

        for l in out.split('\n'):
            print l
        if gitRm.returncode != 0:
            raise RuntimeError("Failed to clean up git repo prior to import.")

    if repoNeedsCommit:
        commitMesg = ("Cleaning Git repository in preparation for import of %s "
         "version %s" % (opts.package_name, opts.package_version))

        gitCommit = Popen([GIT_BIN, 'commit', '-a', '-m', commitMesg],
         cwd=opts.git_repo, stdout=PIPE, stderr=STDOUT, universal_newlines=True)
        out, err = gitCommit.communicate()

        if gitCommit.returncode != 0:
            raise RuntimeError("Git commit of clean repo failed: %s" % (out))

def DownloadFile(url, localFile):
    # TODO: check SSL
    try:
        urlHandle = urlopen(url)

        with open(localFile, 'wb') as localFileHandle:
            localFileHandle.write(urlHandle.read())

    except HTTPError, ex:
        os.unlink(localFile)
        raise ValueError("Error downloading %s: %s" % (url, ex))
    except URLError, ex:
        os.unlink(localFile)
        raise ValueError("URL Error on %s: %s" % (url, ex))
    finally:
        urlHandle.close()

def GetGitRepoBranchList(repo):
    gitBranch = Popen([GIT_BIN, 'for-each-ref', '--format=%(refname:short)',
     'refs/heads/'], cwd=repo, stdout=PIPE, stderr=PIPE,
     universal_newlines=True)
    out, err = gitBranch.communicate()
    if gitBranch.returncode != 0:
        raise ValueError("Obtaining git repo branch list failed: %s" % (err))

    return out.split('\n')

def GitCheckout(repo, branch, createBranch=False):
    if branch in GetGitRepoBranchList(repo):
        checkoutArgs = [branch]
    else:
        if createBranch:
            checkoutArgs = ['-b', branch]
        else:
            raise ValueError("GitCheckout(): non-existent git branch %s and "
             "createBranch not specified" % (branch))

    gitCheckout = Popen([GIT_BIN, 'checkout'] + checkoutArgs, cwd=repo,
     stdout=PIPE, stderr=STDOUT, universal_newlines=True)
    out, err = gitCheckout.communicate()

    if gitCheckout.returncode != 0:
        raise RuntimeError("Failed to checkout branch %s: %s" % (branch, out))

def ValidateGitRepo(repo):
    gitStatus = Popen([GIT_BIN, 'status'], cwd=repo, stdout=PIPE, stderr=STDOUT,
     universal_newlines=True)
    out, err = gitStatus.communicate()

    if gitStatus.returncode != 0:
        raise ValueError("Invalid Git repo %s" % (repo))

    repoClean = None
    foundBranch = False
    for line in out.split('\n'):
        match = re.match('^On branch (.+)', line)
        if match is not None:
            foundBranch = True
            #print "Branch line found: %s." % (match.group(1))
        firstCommit = re.match('^Initial commit$', line)
        repoClean = re.match('^nothing to commit, working directory clean$',
         line)

    if repoClean is None and firstCommit is not None:
        raise ValueError("Git repo must be clean before using this tool: %s" %
         (out))

    assert foundBranch, "Could not detect branch name from git status?"

def DoImport(opts, args):
    if (opts.vendor_name is None or
            opts.package_version is None or
            opts.package_name is None):
        raise ValueError('Vendor name (-V), package name (-n), and package '
         'version (-v) are required in import mode.')

    if (opts.package_url is None and
            opts.package_file is None and
            opts.package_dir is None):
        raise ValueError('One of a package URL (-u), a package file name (-f), '
         'or package directory (-d)    must be specified in import mode.')

    # Get this out of the way early...
    #
    # Just to be clear: the rest of this function doesn't expect to handle
    # a package directory (i.e. -d/--package-dir, so if this check gets removed
    # it's unclear what will happen...
    if opts.package_dir:
        raise NotImplementedError('--package-dir unimplemented.')

    # First, make sure we're dealing with a file we know how to deal with; this
    # is only needed in URL and file modes
    explodeArchiveHandler = None

    if opts.package_url:
        filename = os.path.basename(opts.package_url)
        filenameFullPath = os.path.join(gettempdir(), filename)
        fileProvenenceCommitInfo = "Downloaded from: %s" % (opts.package_url)

        DownloadFile(opts.package_url, filenameFullPath)
    elif opts.package_file:
        filename = os.path.basename(opts.package_file)
        filenameFullPath = os.path.abspath(opts.package_file)
        fileProvenenceCommitInfo = ("Original filename: %s\n"
         "Source machine hostname: %s" % (filenameFullPath, getfqdn()))

        if not os.path.isfile(filenameFullPath):
            raise ValueError("Specified package file missing or not a file: %s" %
             (filenameFullPath))
    else:
        assert False, "Unhandled import mode."

    # Get the file extension, sans '.'
    fileExtension = os.path.splitext(filename)[1][1:]
    try:
        explodeArchiveHandler = KNOWN_ARCHIVE_FORMATS[fileExtension]
    except KeyError:
        raise ValueError("Unable to handle packages with archive type of %s; "
         "available archive formats: %s" % (fileExtension,
         ', '.join(KNOWN_ARCHIVE_FORMATS.keys())))

    projectBranch = "%s-upstream" % (opts.package_name)

    GitCheckout(opts.git_repo, projectBranch, createBranch=True)
    ClearGitRepo(opts.git_repo)

    stripPath = int(opts.strip_path)
    explodeArchiveHandler(filenameFullPath, opts.git_repo, stripPath)

    gitAdd = Popen([GIT_BIN, 'add', '.'], cwd=opts.git_repo,
     stdout=PIPE, stderr=STDOUT, universal_newlines=True)
    out, err = gitAdd.communicate()

    if gitAdd.returncode != 0:
        raise RuntimeError("Git add failed; %s" % (out))

    fileStatInfo = os.stat(filenameFullPath)

    commitMesg = """Import %s version %s.

%s
File size: %s
File mtime: %s
SHA1 checksum: %s
SHA256 checksum: %s
""" % (opts.package_name, opts.package_version, fileProvenenceCommitInfo,
fileStatInfo.st_size,
datetime.fromtimestamp(fileStatInfo.st_mtime).strftime('%c'),
GetFileHash(filenameFullPath), GetFileHash(filenameFullPath, 'sha256'))

    gitCommit = Popen([GIT_BIN, 'commit', '-a', '-m', commitMesg],
     cwd=opts.git_repo, stdout=PIPE, stderr=STDOUT, universal_newlines=True)
    out, err = gitCommit.communicate()

    if gitCommit.returncode != 0:
        raise RuntimeError("Git commit of import failed: %s" % (out))

    tagName = "%s-%s" % (opts.package_name, opts.package_version)
    tagMesg = "Version %s of %s." % (opts.package_version, opts.package_name)

    gitTag = Popen([GIT_BIN, 'tag', '-a', '-m', tagMesg, tagName],
     cwd=opts.git_repo, stdout=PIPE, stderr=STDOUT, universal_newlines=True)
    out, err = gitTag.communicate()

    if gitTag.returncode != 0:
        raise RuntimeError("Git tag of import failed: %s" % (out))

    print """Validate the %s version %s import looks the way you expect with Git log.

Publish the %s version %s import with:

        git push --tags origin %s
""" % (opts.package_name, opts.package_version, opts.package_name,
opts.package_version, projectBranch)

def DoSetupVendorTrackingBranch(opts, args):
    if (opts.vendor_name is None or
        opts.package_name is None):
        raise ValueError('Vendor name (-V) and package name (-n) required for '
        'setup-vendor-tracking-branch mode')

    vendorBranch = "%s-master" % (opts.vendor_name)
    if vendorBranch in GetGitRepoBranchList(opts.git_repo):
        raise ValueError("Vendor Tracking Branch %s already exists" %
         (vendorBranch))

    upstreamBranch = "%s-upstream" % (opts.package_name)
    try:
        GitCheckout(opts.git_repo, upstreamBranch)
    except ValueError, ex:
        if not re.match('^GitCheckout\(\): non-existent git branch', str(ex)):
            raise ex
        else:
            raise ValueError("Expected project branch %s does not exist; was "
             "source imported properly?" % (upstreamBranch))

    GitCheckout(opts.git_repo, vendorBranch, createBranch=True)
    print """Vendor branch %s created.

You may inspect it with git log/gitk.

You can publish the vendor branch with:
        git push origin %s
""" % (vendorBranch, vendorBranch)

# This must be defined after all the mode handler functions are defined.
VALID_MODES = {
    'import': DoImport,
    'setup-vendor-tracking-branch': DoSetupVendorTrackingBranch,
}

def main(argv):
    # TODO: Add help, re: mode
    o = OptionParser()

    o.add_option('-V', '--vendor',
                 dest='vendor_name', default=None,
                 help='Your vendor name.')

    o.add_option('-n', '--package-name',
                 dest='package_name', default=None,
                 help='The short name of the package i.e. libzmq, poco, etc.')

    o.add_option('-v', '--package-version',
                 dest='package_version', default=None,
                 help='The version of the package.')

    o.add_option('-G', '--git-repo',
                 dest='git_repo', default=os.getcwd(),
                 help='Directory name of the git repo to use; default: cwd')

    # Import mode; one of...
    o.add_option('-u', '--package-url',
                 dest='package_url', default=None,
                 help='The URL to download the package.')
    o.add_option('-f', '--package-file',
                 dest='package_file', default=None,
                 help='The path to the package tarball.')
    o.add_option('-d', '--package-dir',
                 dest='package_dir', default=None,
                 help='The path to a directory containing the exploded package.')
    o.add_option('-p', '--strip-path',
                 dest='strip_path', default=0,
                 help='The number of path elements to strip off the front from '
                      "archive files (reminiscent of patch's -p option).")

    (options, args) = o.parse_args()

    try:
        try:
            mode = args[0]
        except IndexError:
            raise ValueError("Must specify a mode: %s" %
             (', '.join(VALID_MODES.keys())))

        if mode not in VALID_MODES.keys():
            raise ValueError("Invalid Mode: %s" % (mode))
    except ValueError, ex:
        print >> sys.stderr, "%s\n" % (ex)
        o.print_usage()
        return 1

    try:
        # First, validate the git repo...
        ValidateGitRepo(options.git_repo)

        # Then, call the handler for the specified mode...
        VALID_MODES[mode](options, args)
    except Exception, ex:
        print >> sys.stderr, ex
        return 1

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
