#!/usr/bin/env python
#
#
# Copyright (c) 2016   Threatstack, Inc
#                      J. Paul Reed
#
# Licensed under the MIT license; see the LICENSE file for more information.
#
#
#
# TODO:
# Check python 2.7
# Validate SSL?
# cleanup tmpfiles
# helper functions for branch names
# option to fetch/expand submodules
#   Coalesce the umask/chmod() code in UnzipFile(), which is cut/paste
#     (In fact, that code should be refactored to remove use of extract()
#      altogether, even in the stripPath=0 case; extract doesn't do as
#      much as I thought it did, so having two cases for that code is
#      mostly-pointless.)

from datetime import datetime
import hashlib
from optparse import OptionParser
import os
import re
from socket import getfqdn
import stat
from subprocess import Popen, PIPE, STDOUT
import sys
from tarfile import TarFile, is_tarfile
from tempfile import gettempdir
from urllib2 import urlopen, URLError, HTTPError
from zipfile import ZipFile

GIT_BIN = os.getenv('GIT', 'git')

READ_CHUNK_SZ = 8192

VERSION = '0.1.0+'

# Check environment for DEBUGging flag.
DEBUG = os.getenv('DEBUG') is not None

def RunGitCmd(gitCmdArgs=None, gitDir=os.getcwd(), exceptionContext=None,
 mixOutput=True):

    if gitCmdArgs is None:
        raise ValueError("RunGitCmd(): must provide git array of arguments.")

    try:
        fullGitCmd = [GIT_BIN] + gitCmdArgs
    except TypeError:
        raise ValueError("RunGitCmd(): must provide git array of arguments.")

    if exceptionContext is None:
        exceptionContext = "No context provided for this git exception."

    if mixOutput:
        stderrHandle = STDOUT
    else:
        stderrHandle = PIPE

    if DEBUG:
        print >> sys.stderr, "RunGitCmd() in %s: [%s]" % (gitDir,
         ','.join(fullGitCmd))

    gitCmd = Popen(fullGitCmd, cwd=gitDir, stdout=PIPE, stderr=stderrHandle,
     universal_newlines=True)
    out, err = gitCmd.communicate()

    if gitCmd.returncode != 0:
        raise RuntimeError("%s: %s, %s, %s" % (exceptionContext,
         gitCmd.returncode, out, err))

    if mixOutput:
        return (out, gitCmd.returncode)
    else:
        return (out, err, gitCmd.returncode)

def GetFileHash(filename, hashType='sha1'):
    if hashType not in hashlib.algorithms:
        raise ValueError("Invalid checksum hash: %s" % (hashType))

    hashObj = hashlib.new(hashType)

    with open(filename, 'rb') as fileHandle:
        while True:
            chunk = fileHandle.read(READ_CHUNK_SZ)
            if chunk == '':
                break

            hashObj.update(chunk)

    return hashObj.hexdigest()

def UntarFile(tarFile, dest, stripPath=0):
    print "Untarring %s to %s with stripPath %s" % (tarFile, dest, stripPath)

    # Get (and reset) the currrent umask
    umask = os.umask(0)
    os.umask(umask)

    if not is_tarfile(tarFile):
        raise ValueError("Invalid tarfile (.tar.gz/tar.bz2 currently "
         "supported: %s" % (tarfile))

    with TarFile.open(tarFile, 'r|*') as tarfileHandle:
        tarFileMembers = tarfileHandle.getmembers()

    with TarFile.open(tarFile, 'r|*') as tarfileHandle:
        for member in tarFileMembers:
            pathParts = os.path.normpath(member.name).split(os.sep)
            pathParts = pathParts[stripPath:]

            if len(pathParts) == 0:
                continue

            memberDest = os.sep.join(pathParts)
            print >> sys.stderr, "memberDest: %s" % (memberDest)
            memberDestFullPath = os.path.join(dest, memberDest)

            if member.isfile():
                fileDir = os.path.dirname(memberDestFullPath)

                if not os.path.exists(fileDir):
                    os.makedirs(fileDir)

                    os.chmod(fileDir, os.stat(fileDir).st_mode |
                     ((stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH ) & ~umask))

                try:
                    tarMemberHandle = tarfileHandle.extractfile(member)
                    with open(memberDestFullPath, 'wb') as destFileHandle:
                        destFileHandle.write(tarMemberHandle.read())
                finally:
                    tarMemberHandle.close()

            elif member.isdir():
                os.makedirs(memberDestFullPath)
            else:
                print >> sys.stderr, ("WARNING: other file types inside a "
                "tarfile not currently supported: tar file member %s, type %s"
                % (member.name, member.type))

            os.chmod(memberDestFullPath, member.mode)

def UnzipFile(zipfile, dest, stripPath=0):
    print "Unzipping %s to %s with stripPath %s" % (zipfile, dest, stripPath)

    # Get (and reset) the currrent umask
    umask = os.umask(0)
    os.umask(umask)

    with ZipFile(zipfile, 'rb') as zipfileHandle:
        # We do this manually instead of using extractall() because extract()
        # sanitizes absolute and '..'-containing paths in a reasonable way, so
        # we don't have to.
        if stripPath > 0:
            for member in zipfileHandle.infolist():
                pathParts = os.path.normpath(member.filename).split(os.sep)
                pathParts = pathParts[stripPath:]

                if len(pathParts) == 0:
                    continue

                memberDest = os.sep.join(pathParts)
                memberDestFullPath = os.path.join(dest, memberDest)

                memberInfo = zipfileHandle.getinfo(member.filename)
                memberPerms = (memberInfo.external_attr >> 16L)

                #print "%s -> %s" % (member.filename, memberDestFullPath)
                if member.filename.endswith('/'):
                    os.makedirs(memberDestFullPath)
                else:
                    with open(memberDestFullPath, 'wb') as destFileHandle:
                        destFileHandle.write(zipfileHandle.read(member))

                # Set executable bit on executable files in the archive
                if (memberPerms & stat.S_IXUSR or memberPerms & stat.S_IXGRP or
                 memberPerms & stat.S_IXOTH):
                    os.chmod(memberDestFullPath,
                     os.stat(memberDestFullPath).st_mode |
                     ((stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH ) & ~umask))
        else:
            for member in zipfileHandle.namelist():
                memberInfo = zipfileHandle.getinfo(member)
                memberPath = os.path.join(dest, memberInfo.filename)
                zipfileHandle.extract(member, dest)

                memberPerms = (memberInfo.external_attr >> 16L)

                # Set executable bit on executable files in the archive
                if (memberPerms & stat.S_IXUSR or memberPerms & stat.S_IXGRP or
                 memberPerms & stat.S_IXOTH):
                    os.chmod(memberPath, os.stat(memberPath).st_mode |
                     ((stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH ) & ~umask))

KNOWN_ARCHIVE_FORMATS = {
    'zip': UnzipFile,
    'gz': UntarFile,
    'bz2': UntarFile,
}

def ClearGitRepo(opts):
    repo = opts.git_repo

    repoNeedsCommit = False
    for entry in os.listdir(repo):
        if os.path.isdir(entry):
            # don't perform Git operations on the repo directory.
            if entry == '.git':
                continue

            gitArgs = ['rm', '-r', entry]
        else:
            gitArgs = ['rm', entry]

        out, rv = RunGitCmd(gitArgs, repo,
         "Failed to clean up git repo prior to import for entry: %s" % (entry))

        repoNeedsCommit = True

        for l in out.split('\n'):
            print l

    if repoNeedsCommit:
        commitMesg = ("Cleaning Git repository in preparation for import of %s "
         "version %s" % (opts.package_name, opts.package_version))

        RunGitCmd(['commit', '-a', '-m', commitMesg],
         repo, "Git commit of clean repo failed")

def DownloadFile(url, localFile):
    # TODO: check SSL
    urlHandle = None
    try:
        urlHandle = urlopen(url)

        with open(localFile, 'wb') as localFileHandle:
            localFileHandle.write(urlHandle.read())

    except (HTTPError, URLError) as ex:
        if os.path.exists(localFile):
            os.unlink(localFile)
        raise ValueError("Error downloading %s: %s" % (url, ex))
    finally:
        if urlHandle is not None:
            urlHandle.close()

def GetGitRepoBranchList(repo):
    out, rv = RunGitCmd(['for-each-ref', '--format=%(refname:short)',
     'refs/heads/'], repo,
     "Obtaining git repo branch list failed")

    return out.split('\n')

def GitCheckout(repo, branch, createBranch=False):
    if branch in GetGitRepoBranchList(repo):
        checkoutArgs = [branch]
    else:
        if createBranch:
            checkoutArgs = ['-b', branch]
        else:
            raise ValueError("GitCheckout(): non-existent git branch %s and "
             "createBranch not specified" % (branch))

    RunGitCmd(['checkout'] + checkoutArgs, repo,
        "Failed to checkout branch %s" % (branch))

def ValidateGitRepo(repo):
    try:
        out, rv = RunGitCmd(['status'], repo, "Invalid Git repo %s" %
         (repo))
    except RuntimeError, ex:
        raise ValueError(ex)

    repoClean = None
    foundBranch = False
    for line in out.split('\n'):
        match = re.match('^On branch (.+)', line)
        if match is not None:
            foundBranch = True
            #print "Branch line found: %s." % (match.group(1))
        firstCommit = re.match('^Initial commit$', line)
        repoClean = re.match('^nothing to commit, working directory clean$',
         line)

    if repoClean is None and firstCommit is not None:
        raise ValueError("Git repo must be clean before using this tool: %s" %
         (out))

    assert foundBranch, "Could not detect branch name from git status?"

def DoImport(opts, args):
    if (opts.vendor_name is None or
            opts.package_version is None or
            opts.package_name is None):
        raise ValueError('Vendor name (-V), package name (-n), and package '
         'version (-v) are required in import mode.')

    if (opts.package_url is None and
            opts.package_file is None and
            opts.package_dir is None):
        raise ValueError('One of a package URL (-u), a package file name (-f), '
         'or package directory (-d)    must be specified in import mode.')

    # Get this out of the way early...
    #
    # Just to be clear: the rest of this function doesn't expect to handle
    # a package directory (i.e. -d/--package-dir, so if this check gets removed
    # it's unclear what will happen...
    if opts.package_dir:
        raise NotImplementedError('--package-dir unimplemented.')

    # First, make sure we're dealing with a file we know how to deal with; this
    # is only needed in URL and file modes
    explodeArchiveHandler = None

    if opts.package_url:
        filename = os.path.basename(opts.package_url)
        filenameFullPath = os.path.join(gettempdir(), filename)
        fileProvenenceCommitInfo = "Downloaded from: %s" % (opts.package_url)

        DownloadFile(opts.package_url, filenameFullPath)
    elif opts.package_file:
        filename = os.path.basename(opts.package_file)
        filenameFullPath = os.path.abspath(opts.package_file)
        fileProvenenceCommitInfo = ("Original filename: %s\n"
         "Source machine hostname: %s" % (filenameFullPath, getfqdn()))

        if not os.path.isfile(filenameFullPath):
            raise ValueError("Specified package file missing or not a file: %s" %
             (filenameFullPath))
    else:
        assert False, "Unhandled import mode."

    if opts.archive_format is not None:
        fileExtension = opts.archive_format
    else:
        # Get the file extension, sans '.'
        fileExtension = os.path.splitext(filename)[1][1:]

    try:
        explodeArchiveHandler = KNOWN_ARCHIVE_FORMATS[fileExtension]
    except KeyError:
        raise ValueError("Unable to handle packages with archive type of %s; "
         "available archive formats: %s" % (fileExtension,
         ', '.join(KNOWN_ARCHIVE_FORMATS.keys())))

    projectBranch = "%s-upstream" % (opts.package_name)

    GitCheckout(opts.git_repo, projectBranch, createBranch=True)
    ClearGitRepo(opts)

    stripPath = int(opts.strip_path)
    explodeArchiveHandler(filenameFullPath, opts.git_repo, stripPath)

    RunGitCmd(['add', '.'], opts.git_repo, "Git add failed")
    out, rv = RunGitCmd(['status', '--porcelain', '-z', '.'],
     opts.git_repo, "Git status during add validation failed")

    pendingAdds = []
    for statusEntry in out.split('\0')[:-1]:
        pendingAdds.append(statusEntry[3:])

    #for p in pendingAdds:
    #    print p

    missedAdds = []
    gitRepoPath = os.path.abspath(opts.git_repo)

    for root, dirs, files in os.walk(gitRepoPath, topdown=True):
        # Ignore the .git directories, if they exist
        try:
            dirs.remove('.git')
        except ValueError:
            pass

        # Git won't add empty directories, so if the tarball creates an
        # empty directory, it _may_ assume that it exists in the repo
        # for some reason; warn on this odd corner case.
        for d in dirs:
             if len(os.listdir(os.path.join(root, d))) == 0:
                 missedAdds.append(os.path.join(root, d))

        for f in files:
            entry = os.path.join(root, f)
            # Since we're os.walk()ing from the gitRepoPath, root includes
            # the full path on the file system; but git only knows about the
            # path relative to the repo, so strip that prefix off.
            gitRepoEntry = entry[len(gitRepoPath) + 1:]

            try:
                pendingAdds.remove(gitRepoEntry)
            except ValueError:
                missedAdds.append(gitRepoEntry)

    assert len(pendingAdds) == 0, ("pendingAdds should always be empty after "
     "traversing the file system")

    missedAdds.sort()

    fileStatInfo = os.stat(filenameFullPath)

    commitMesg = """Import %s version %s.

%s
File size: %s
File mtime: %s
File SHA1 checksum: %s
File SHA256 checksum: %s

Imported by %s, version %s
""" % (opts.package_name, opts.package_version, fileProvenenceCommitInfo,
 fileStatInfo.st_size,
 datetime.fromtimestamp(fileStatInfo.st_mtime).strftime('%c'),
 GetFileHash(filenameFullPath), GetFileHash(filenameFullPath, 'sha256'),
 os.path.basename(sys.argv[0]), VERSION)

    RunGitCmd(['commit', '-a', '-m', commitMesg], opts.git_repo,
     "Git commit of import failed")

    tagName = "%s-%s" % (opts.package_name, opts.package_version)
    tagMesg = "Version %s of %s." % (opts.package_version, opts.package_name)

    RunGitCmd(['tag', '-a', '-m', tagMesg, tagName], opts.git_repo,
     "Git tag of import failed")

    missedAddsWarningStr = ""
    if len(missedAdds) > 0:
        missedAddsWarningStr = """

=============================================
WARNING: the following directory entries were not added during the 'git add'
operation:

%s

This usually occurs because of an entry in .gitignore that matches a
source file. (This usually happens a .gitignore entry was added after the
source file in question was added or due to unit test data.)

To correct this, 'git add -f' the above files and then append them to the
existing git commit with 'git commit --amend'
=============================================

""" % ("\n".join(missedAdds))


    print """Validate the %s version %s import looks the way you expect with Git log.
%s
After you are satisfied, publish the %s version %s import with:

        git push --tags origin %s
""" % (opts.package_name, opts.package_version, missedAddsWarningStr,
opts.package_name, opts.package_version, projectBranch)

def DoSetupVendorTrackingBranch(opts, args):
    if (opts.vendor_name is None or
        opts.package_name is None):
        raise ValueError('Vendor name (-V) and package name (-n) required for '
        'setup-vendor-tracking-branch mode')

    vendorBranch = "%s-master" % (opts.vendor_name)
    if vendorBranch in GetGitRepoBranchList(opts.git_repo):
        raise ValueError("Vendor Tracking Branch %s already exists" %
         (vendorBranch))

    upstreamBranch = "%s-upstream" % (opts.package_name)
    try:
        GitCheckout(opts.git_repo, upstreamBranch)
    except ValueError, ex:
        if not re.match('^GitCheckout\(\): non-existent git branch', str(ex)):
            raise ex
        else:
            raise ValueError("Expected project branch %s does not exist; was "
             "source imported properly?" % (upstreamBranch))

    GitCheckout(opts.git_repo, vendorBranch, createBranch=True)
    print """Vendor branch %s created.

You may inspect it with git log/gitk.

You can publish the vendor branch with:
        git push origin %s
""" % (vendorBranch, vendorBranch)

# This must be defined after all the mode handler functions are defined.
VALID_MODES = {
    'import': DoImport,
    'setup-vendor-tracking-branch': DoSetupVendorTrackingBranch,
}

def main(argv):
    availableModes = ', '.join(VALID_MODES.keys())
    progName = os.path.basename(sys.argv[0])
    usageStr = ("Usage: %s [mode] [options]\n"
     "Available modes: %s\n\n"
     "Version: %s" % (progName, availableModes, VERSION))

    o = OptionParser(usage=usageStr)

    o.add_option('-V', '--vendor',
                 dest='vendor_name', default=None,
                 help='Your vendor name.')

    o.add_option('-n', '--package-name',
                 dest='package_name', default=None,
                 help='The short name of the package i.e. libzmq, poco, etc.')

    o.add_option('-v', '--package-version',
                 dest='package_version', default=None,
                 help='The version of the package.')

    o.add_option('-G', '--git-repo',
                 dest='git_repo', default=os.getcwd(),
                 help='Directory name of the git repo to use; default: cwd')

    # Import mode; one of...
    o.add_option('-u', '--package-url',
                 dest='package_url', default=None,
                 help='The URL to download the package.')
    o.add_option('-f', '--package-file',
                 dest='package_file', default=None,
                 help='The path to the package tarball.')
    o.add_option('-d', '--package-dir',
                 dest='package_dir', default=None,
                 help='The path to a directory containing the exploded package.')
    o.add_option('-p', '--strip-path',
                 dest='strip_path', default=0,
                 help='The number of path elements to strip off the front from '
                      "archive files (reminiscent of patch's -p option).")

    o.add_option('-a', '--archive-format',
                 dest='archive_format', default=None,
                 help='Override the archive format detection and use the '
                  'specified format (available formats: %s)' %
                  ', '.join(KNOWN_ARCHIVE_FORMATS.keys()))

    (options, args) = o.parse_args()

    try:
        try:
            mode = args[0]
        except IndexError:
            raise ValueError("Must specify a mode: %s" % availableModes)

        if mode not in VALID_MODES.keys():
            raise ValueError("Invalid Mode: %s" % (mode))
    except ValueError, ex:
        print >> sys.stderr, "%s\n" % (ex)
        o.print_usage()
        return 1

    try:
        # First, validate the git repo...
        ValidateGitRepo(options.git_repo)

        # Then, call the handler for the specified mode...
        VALID_MODES[mode](options, args)
    except KeyboardInterrupt:
        return 0
    except Exception, ex:
        print >> sys.stderr, ex
        return 1

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
